name: Docker-Frontend

on:
  push:
    # Publish `develop` as Docker `latest` image.
    branches:
      - develop

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: frontend

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/:
  test:
    defaults:
      run:
        working-directory: frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: True

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          context: frontend/
          file: frontend/Dockerfile 
      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml run sut
          fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Setup SSH connection
        run: |
          mkdir -p ~/.ssh/
          echo "$DEV_PRIVATE_KEY" > ../private.key
          sudo chmod 600 ../private.key
          echo "$DEV_KNOWN_HOSTS" > ~/.ssh/known_hosts
        shell: bash
        env: 
          DEV_PRIVATE_KEY: ${{secrets.DEV_PRIVATE_KEY}}
          DEV_KNOWN_HOSTS: ${{secrets.DEV_KNOWN_HOSTS}}
      - name: Run update.sh
        run: |
          ssh -i $SSH_KEY_PATH dev@naklar.io ./update.sh
        shell: bash
        env:
          SSH_KEY_PATH: ${{ github.workspace }}/../private.key


  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    defaults:
      run:
        working-directory: frontend

    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: True

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }} 
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          context: frontend/
          file: frontend/Dockerfile 

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=naklario/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "develop" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          # tag it as release if tag applies
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && docker tag $IMAGE_NAME $IMAGE_ID:release
          
          # docker push $IMAGE_ID:$VERSION
          # push all tags
          docker push $IMAGE_ID
